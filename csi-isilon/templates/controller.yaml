apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-controller
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments/status"]
    verbs: ["patch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch", "update"]
# below for snapshotter
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots/status"]
    verbs: ["update"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents/status"]
    verbs: ["update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create", "list", "watch", "delete"]
 # below for resizer
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-controller
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-controller
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-controller
  apiGroup: rbac.authorization.k8s.io
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-controller
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-controller
  {{- if lt (.Values.controllerCount | toString | atoi ) 1 -}}
  {{- fail "value for .Values.controllerCount should be atleast 1" }}
  {{- else }}
  replicas: {{ required "Must provide the number of controller instances to create." .Values.controllerCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-controller
    spec:
      serviceAccount: {{ .Release.Name }}-controller
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Release.Name }}-controller
            topologyKey: kubernetes.io/hostname
      {{ if .Values.controller.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.controller.nodeSelector | nindent 8 }}
      {{ end }}
      {{ if .Values.controller.tolerations }}
      tolerations:
      {{- toYaml .Values.controller.tolerations | nindent 8 }}
      {{ end }}
      containers:
        - name: resizer
          image: {{ required "Must provide the CSI resizer container image." .Values.images.resizer }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: attacher
          image: {{ required "Must provide the CSI attacher container image." .Values.images.attacher }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--v=5"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: provisioner
          image: {{ required "Must provide the CSI provisioner container image." .Values.images.provisioner }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--volume-name-prefix={{ required "Must provide a value to prefix to driver created volume names" .Values.volumeNamePrefix }}"
            - "--volume-name-uuid-length=10"
            - "--worker-threads=5"
            - "--timeout=60s"
            - "--v=5"
            - "--feature-gates=Topology=true"
            - "--leader-election"
            - "--extra-create-metadata"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: snapshotter
          #image: quay.io/k8scsi/csi-snapshotter:v1.0.0
          image: {{ required "Must provide the CSI snapshotter container image." .Values.images.snapshotter }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--timeout=15s"
            - "--v=5"
            - "--leader-election"
          env:
            - name: ADDRESS
              value: /var/run/csi/csi.sock
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
        - name: driver
          image: {{ required "Must provide the Isilon driver container image." .Values.images.driver }}
          imagePullPolicy: Always
          command: [ "/csi-isilon" ]
          args:
            - "--leader-election"
          env:
            - name: CSI_ENDPOINT
              value: /var/run/csi/csi.sock
            - name: X_CSI_MODE
              value: controller
            - name: X_CSI_DEBUG
              value: "{{ .Values.enableDebug }}"
            - name: X_CSI_ISI_INSECURE
              value: "{{ .Values.isiInsecure }}"
            - name: X_CSI_VERBOSE
              value: "{{ .Values.verbose }}"
            - name: X_CSI_ISI_PORT
              value: "{{ .Values.isiPort }}"
            - name: X_CSI_ISI_AUTOPROBE
              value: "{{ .Values.autoProbe }}"
            - name: X_CSI_ISI_QUOTA_ENABLED
              value: "{{ .Values.enableQuota }}"
            - name: X_CSI_ISI_ACCESS_ZONE
              value: {{ .Values.isiAccessZone }}
            - name: X_CSI_CUSTOM_TOPOLOGY_ENABLED
              value: "{{ .Values.enableCustomTopology }}"
            - name: X_CSI_ISI_PATH
              value: {{ .Values.isiPath }}
            - name: X_CSI_ISILON_NO_PROBE_ON_START
              value: "{{ .Values.noProbeOnStart }}"    
            - name: X_CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SSL_CERT_DIR
              value: /certs
            - name: X_CSI_ISILON_CONFIG_PATH
              value: /isilon-configs/config
          volumeMounts:
            - name: socket-dir
              mountPath: /var/run/csi
            - name: certs
              mountPath: /certs
              readOnly: true
            - name: isilon-configs
              mountPath: /isilon-configs
      volumes:
        - name: socket-dir
          emptyDir:
        - name: certs
          projected:
            sources:
{{- range $i, $e := until (int .Values.certSecretCount ) }}
              - secret:
                  name: {{ print $.Release.Name "-certs-" $e }}
                  items:
                    - key: cert-{{ $e }}
                      path: cert-{{ $e }}
{{- end }}
        - name: isilon-configs
          secret:
            secretName: {{ .Release.Name }}-creds
