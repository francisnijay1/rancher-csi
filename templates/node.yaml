{{ if eq .Values.storageType "unity" }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-node
rules:
  - apiGroups: [ "" ]
    resources: [ "persistentvolumes" ]
    verbs: [ "create", "delete", "get", "list", "watch", "update" ]
  - apiGroups: [ "" ]
    resources: [ "persistentvolumesclaims" ]
    verbs: [ "get", "list", "watch", "update" ]
  - apiGroups: [ "" ]
    resources: [ "events" ]
    verbs: [ "get", "list", "watch", "create", "update", "patch" ]
  - apiGroups: [ "" ]
    resources: [ "nodes" ]
    verbs: [ "get", "list", "watch", "update", "patch" ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "volumeattachments" ]
    verbs: [ "get", "list", "watch", "update" ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "storageclasses" ]
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "storage.k8s.io" ]
    resources: [ "volumeattachments" ]
    verbs: [ "get", "list", "watch", "update" ]
  - apiGroups: [ "security.openshift.io" ]
    resourceNames: [ "privileged" ]
    resources: [ "securitycontextconstraints" ]
    verbs: [ "use" ]
{{ if .Values.podmon.enabled }}
  - apiGroups: [ "" ]
    resources: [ "pods" ]
    verbs: [ "get", "list", "watch", "update", "delete" ]
  - apiGroups: [ "coordination.k8s.io" ]
    resources: [ "leases" ]
    verbs: [ "get", "watch", "list", "delete", "update", "create" ]
{{ end }}
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-node
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-node
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-node
  apiGroup: rbac.authorization.k8s.io
---
{{ $releaseName := .Release.Name }}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Release.Namespace }}
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Release.Name }}-node
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-node
    spec:
      serviceAccountName: {{ .Release.Name }}-node
      tolerations:
        - key: "node.kubernetes.io/memory-pressure"
          operator: "Exists"
          effect: "NoExecute"
        - key: "node.kubernetes.io/disk-pressure"
          operator: "Exists"
          effect: "NoExecute"
        - key: "node.kubernetes.io/network-unavailable"
          operator: "Exists"
          effect: "NoExecute"
      hostIPC: true
      hostNetwork: true
      containers:
{{ if .Values.podmon.enabled }}
        - name: podmon
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          imagePullPolicy: Always
          image: {{ required "Must provide the podmon container image." .Values.podmon.image }}
          args:
          {{- toYaml .Values.podmon.node.args | nindent 12 }}
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: X_CSI_PRIVATE_MOUNT_DIR
              value: "/var/lib/kubelet/plugins/unity.emc.dell.com/disks"
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: kubelet-pods
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: driver-path
              mountPath: /var/lib/kubelet/plugins/unity.emc.dell.com
              mountPropagation: "Bidirectional"
            - name: usr-bin
              mountPath: /usr-bin
{{ end }}
        - name: driver
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: {{ required "Must provide the Unity driver container image." .Values.images.driver.unity }}
          args:
            - "--driver-name=csi-unity.dellemc.com"
            - "--driver-config=/unity-config/config"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/kubelet/plugins/unity.emc.dell.com/csi_sock
            - name: X_CSI_MODE
              value: node
            - name: X_CSI_UNITY_AUTOPROBE
              value: "true"
            - name: X_CSI_PRIVATE_MOUNT_DIR
              value: "/var/lib/kubelet/plugins/unity.emc.dell.com/disks"
            - name: X_CSI_EPHEMERAL_STAGING_PATH
              value: "/var/lib/kubelet/plugins/kubernetes.io/csi/pv/"
            - name: X_CSI_ISCSI_CHROOT
              value: {{ .Values.ISCSIChroot | default "/noderoot" }}
            - name: X_CSI_UNITY_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: X_CSI_UNITY_NODENAME_PREFIX
              value: {{ .Values.nodeNamePrefix }}
            - name: SSL_CERT_DIR
              value: /certs
          volumeMounts:
            - name: driver-path
              mountPath: /var/lib/kubelet/plugins/unity.emc.dell.com
            - name: volumedevices-path
              mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi
              mountPropagation: "Bidirectional"
            - name: pods-path
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: dev
              mountPath: /dev
            - name: noderoot
              mountPath: /noderoot
            - name: certs
              mountPath: /certs
              readOnly: true
            - name: unity-config
              mountPath: /unity-config
        - name: registrar
          image: {{ required "Must provide the CSI node registrar container image." .Values.images.registrar }}
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - --kubelet-registration-path=/var/lib/kubelet/plugins/unity.emc.dell.com/csi_sock
          env:
            - name: ADDRESS
              value: /csi/csi_sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: registration-dir
              mountPath: /registration
            - name: driver-path
              mountPath: /csi
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: driver-path
          hostPath:
            path: /var/lib/kubelet/plugins/unity.emc.dell.com
            type: DirectoryOrCreate
        - name: volumedevices-path
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi
            type: DirectoryOrCreate
        - name: pods-path
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: dev
          hostPath:
            path: /dev
            type: Directory
        - name: noderoot
          hostPath:
            path: /
            type: Directory
        - name: certs
          projected:
            sources:
{{- range $i, $e := until (int .Values.certSecretCount ) }}
              - secret:
                  name: {{ print $releaseName "-certs-" $e }}
                  items:
                    - key: cert-{{ $e }}
                      path: cert-{{ $e }}
{{- end }}
        - name: unity-config
          secret:
              secretName: {{ .Release.Name }}-creds
{{ if .Values.podmon.enabled }}
        - name: usr-bin
          hostPath:
            path: /usr/bin
            type: Directory
        - name: kubelet-pods
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
{{ end }}
{{ else if eq .Values.storageType "powerscale" }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-node
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["create", "delete", "get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumesclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [ "security.openshift.io" ]
    resourceNames: [ "privileged" ]
    resources: [ "securitycontextconstraints" ]
    verbs: [ "use" ]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-node
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-node
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-node
  apiGroup: rbac.authorization.k8s.io
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-node
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-node
    spec:
      serviceAccount: {{ .Release.Name }}-node
      {{ if .Values.node.nodeSelector }}
      nodeSelector:
      {{- toYaml .Values.node.nodeSelector | nindent 8 }}
      {{ end }}
      {{ if .Values.node.tolerations }}
      tolerations:
      {{- toYaml .Values.node.tolerations | nindent 8 }}
      {{ end }}
      hostNetwork: true
      dnsPolicy: {{ .Values.node.dnsPolicy }}
      containers:
        - name: driver
          command: ["/csi-isilon"]
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: {{ required "Must provide the Isilon driver container image." .Values.images.driver.isilon }}
          imagePullPolicy: Always
          env:
            - name: CSI_ENDPOINT
              value: /var/lib/kubelet/plugins/csi-isilon/csi_sock
            - name: X_CSI_MODE
              value: node
            - name: X_CSI_DEBUG
              value: "{{ .Values.enableDebug }}"
            - name: X_CSI_ISI_INSECURE
              value: "{{ .Values.isiInsecure }}"
            - name: X_CSI_ALLOWED_NETWORKS
              value: "{{ .Values.allowedNetworks }}"
            - name: X_CSI_VERBOSE
              value: "{{ .Values.verbose }}"
            - name: X_CSI_PRIVATE_MOUNT_DIR
              value: "/var/lib/kubelet/plugins/csi-isilon/disks"
            - name: X_CSI_ISI_PORT
              value: "{{ .Values.isiPort }}"
            - name: X_CSI_ISI_PATH
              value: {{ .Values.isiPath }}
            - name: X_CSI_ISILON_NO_PROBE_ON_START
              value: "{{ .Values.noProbeOnStart }}"
            - name: X_CSI_ISILON_NFS_V3
              value: "{{ .Values.nfsV3 }}"
            - name: X_CSI_ISI_AUTOPROBE
              value: "{{ .Values.autoProbe }}"
            - name: X_CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: X_CSI_NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: SSL_CERT_DIR
              value: /certs
            - name: X_CSI_ISI_QUOTA_ENABLED
              value: "{{ .Values.enableQuota }}"
            - name: X_CSI_CUSTOM_TOPOLOGY_ENABLED
              value: "{{ .Values.enableCustomTopology }}"
            - name: X_CSI_ISILON_CONFIG_PATH
              value: /isilon-configs/config
            - name: X_CSI_MAX_VOLUMES_PER_NODE
              value: "{{ .Values.maxIsilonVolumesPerNode }}"
          volumeMounts:
            - name: driver-path
              mountPath: /var/lib/kubelet/plugins/csi-isilon
            - name: volumedevices-path
              mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices
            - name: pods-path
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: dev
              mountPath: /dev
            - name: certs
              mountPath: /certs
              readOnly: true
            - name: isilon-configs
              mountPath: /isilon-configs
        - name: registrar
          image: {{ required "Must provide the CSI node registrar container image." .Values.images.registrar }}
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - --kubelet-registration-path=/var/lib/kubelet/plugins/csi-isilon/csi_sock
          env:
            - name: ADDRESS
              value: /csi/csi_sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: registration-dir
              mountPath: /registration
            - name: driver-path
              mountPath: /csi
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: driver-path
          hostPath:
            path: /var/lib/kubelet/plugins/csi-isilon
            type: DirectoryOrCreate
        - name: volumedevices-path
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices
            type: DirectoryOrCreate
        - name: pods-path
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: dev
          hostPath:
            path: /dev
            type: Directory
        - name: certs
          projected:
            sources:
{{- range $i, $e := until (int .Values.certSecretCount ) }}
              - secret:
                  name: {{ print $.Release.Name "-certs-" $e }}
                  items:
                    - key: cert-{{ $e }}
                      path: cert-{{ $e }}
{{- end }}
        - name: isilon-configs
          secret:
            secretName: {{ .Release.Name }}-creds

{{ end }}